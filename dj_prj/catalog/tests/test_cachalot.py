import time
import pytest
from django.core.cache import cache
from catalog.models import Product, Category


@pytest.mark.django_db
def test_cachalot_caches_queries(django_assert_num_queries):
    """
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –¥–µ–ª–∞–µ—Ç SQL-–∑–∞–ø—Ä–æ—Å–æ–≤
    """
    cache.clear()

    category = Category.objects.create(name="Test Category")
    Product.objects.create(name="Test Product", category=category, price=100, stock=10)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å 1 SQL-–∑–∞–ø—Ä–æ—Å)
    with django_assert_num_queries(1):
        list(Product.objects.all())

    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω - 0 SQL-–∑–∞–ø—Ä–æ—Å–æ–≤)
    with django_assert_num_queries(0):
        list(Product.objects.all())


@pytest.mark.django_db
def test_cachalot_improves_query_time(capfd):
    """
    –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é.
    """
    cache.clear()

    category = Category.objects.create(name="Test Category")
    Product.objects.create(name="Test Product 2", category=category, price=200, stock=5)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞)
    start = time.perf_counter()
    list(Product.objects.all())
    first_time = time.perf_counter() - start

    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞)
    start = time.perf_counter()
    list(Product.objects.all())
    second_time = time.perf_counter() - start

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"‚è≥ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–±–µ–∑ –∫—ç—à–∞): {first_time:.6f} —Å–µ–∫—É–Ω–¥")
    print(f"‚ö° –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞): {second_time:.6f} —Å–µ–∫—É–Ω–¥")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–≤–æ–≥–æ
    assert second_time < first_time, "‚ùå –ö—ç—à –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–µ –±—ã—Å—Ç—Ä–µ–µ –ø–µ—Ä–≤–æ–≥–æ!"

    # –ó–∞—Ö–≤–∞—Ç—ã–≤–∞–µ–º –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–∞
    captured = capfd.readouterr()
    print("\nüí° –õ–æ–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:\n", captured.out)

@pytest.mark.django_db
def test_cachalot_cache_clear(django_assert_num_queries):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º—É SQL-–∑–∞–ø—Ä–æ—Å—É.
    """
    cache.clear()

    category = Category.objects.create(name="Test Category")
    product = Product.objects.create(name="Test Product", category=category, price=100, stock=10)

    # –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω —Å–¥–µ–ª–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å)
    with django_assert_num_queries(1):
        list(Product.objects.all())

    # –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–∏–∑ –∫—ç—à–∞, –±–µ–∑ SQL-–∑–∞–ø—Ä–æ—Å–∞)
    with django_assert_num_queries(0):
        list(Product.objects.all())

    # –û—á–∏—â–∞–µ–º –∫—ç—à
    cache.clear()

    # **–û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –ø–µ—Ä–µ–¥ –∑–∞–ø—Ä–æ—Å–æ–º**, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –Ω–æ–≤—ã–π SQL-–∑–∞–ø—Ä–æ—Å –ø—Ä–æ–∏–∑–æ—à—ë–ª
    product.price = 150
    product.save()

    # –ó–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω —Å–Ω–æ–≤–∞ —Å–¥–µ–ª–∞—Ç—å SQL-–∑–∞–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –æ–±—ä–µ–∫—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è)
    with django_assert_num_queries(1):
        list(Product.objects.all())